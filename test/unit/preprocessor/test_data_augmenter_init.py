#!/usr/bin/env python3
"""
Test unitaire pour l'initialisation du module GeophysicalDataAugmenter.
Ce test v√©rifie le bon fonctionnement de l'initialisation avec les vraies donn√©es
g√©ophysiques PD.csv et S.csv.
"""

import sys
import unittest
import numpy as np
import pandas as pd
from pathlib import Path
import time

# Ajouter le r√©pertoire parent au path Python
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

from src.preprocessor.data_augmenter import GeophysicalDataAugmenter
from src.preprocessor.data_cleaner import GeophysicalDataCleaner
from config import CONFIG


class TestDataAugmenterInit(unittest.TestCase):
    """Tests pour l'initialisation de GeophysicalDataAugmenter avec vraies donn√©es"""
    
    def setUp(self):
        """Configuration avant chaque test"""
        self.project_root = Path(__file__).parent.parent.parent.parent
        self.raw_data_dir = self.project_root / "data" / "raw"
        self.processed_data_dir = self.project_root / "data" / "processed"
        self.test_dir = self.project_root / "test" / "fixtures"
        
        # Cr√©er le dossier de test s'il n'existe pas
        (self.test_dir / "processed").mkdir(exist_ok=True)
        
        # Initialiser le nettoyeur de donn√©es pour pr√©parer les donn√©es
        self.cleaner = GeophysicalDataCleaner()
        
        # V√©rifier que les fichiers de donn√©es existent
        self.pd_file = self.raw_data_dir / "PD.csv"
        self.s_file = self.raw_data_dir / "S.csv"
        
        self.assertTrue(self.pd_file.exists(), f"Le fichier {self.pd_file} n'existe pas")
        self.assertTrue(self.s_file.exists(), f"Le fichier {self.s_file} n'existe pas")
    
    def tearDown(self):
        """Nettoyage apr√®s chaque test"""
        processed_dir = self.test_dir / "processed"
        if processed_dir.exists():
            import shutil
            shutil.rmtree(processed_dir)
    
    def test_initialization_without_seed(self):
        """Test de l'initialisation sans graine al√©atoire"""
        augmenter = GeophysicalDataAugmenter()
        
        # V√©rifier les attributs de base
        self.assertIsInstance(augmenter.augmentation_history, list)
        self.assertEqual(len(augmenter.augmentation_history), 0)
        self.assertIsNone(augmenter._random_seed)
        
        print("‚úÖ Initialisation sans graine al√©atoire valid√©e")
    
    def test_initialization_with_seed(self):
        """Test de l'initialisation avec graine al√©atoire"""
        test_seed = 42
        augmenter = GeophysicalDataAugmenter(random_seed=test_seed)
        
        # V√©rifier les attributs de base
        self.assertIsInstance(augmenter.augmentation_history, list)
        self.assertEqual(len(augmenter.augmentation_history), 0)
        self.assertEqual(augmenter._random_seed, test_seed)
        
        print("‚úÖ Initialisation avec graine al√©atoire valid√©e")
    
    def test_initialization_with_different_seeds(self):
        """Test de l'initialisation avec diff√©rentes graines"""
        seeds = [0, 42, 123, 999, 1000]
        
        for seed in seeds:
            augmenter = GeophysicalDataAugmenter(random_seed=seed)
            self.assertEqual(augmenter._random_seed, seed)
            self.assertEqual(len(augmenter.augmentation_history), 0)
        
        print("‚úÖ Initialisation avec diff√©rentes graines valid√©e")
    
    def test_initialization_with_pd_csv_data(self):
        """Test de l'initialisation et utilisation avec les donn√©es PD.csv"""
        # Charger les donn√©es PD.csv
        pd_df = pd.read_csv(self.pd_file, sep=';')
        print(f"üìä Donn√©es PD.csv charg√©es: {pd_df.shape}")
        
        # Initialiser l'augmenteur
        augmenter = GeophysicalDataAugmenter(random_seed=42)
        
        # V√©rifier que l'augmenteur peut traiter ces donn√©es
        self.assertIsInstance(augmenter.augmentation_history, list)
        self.assertEqual(len(augmenter.augmentation_history), 0)
        
        # Tester l'augmentation avec les donn√©es PD.csv
        augmentations = ["gaussian_noise", "value_variation", "spatial_jitter"]
        augmented_dfs = augmenter.augment_dataframe(
            pd_df, 
            augmentations, 
            num_augmentations=2
        )
        
        # V√©rifier les r√©sultats
        self.assertEqual(len(augmented_dfs), 2)
        for augmented_df in augmented_dfs:
            self.assertEqual(augmented_df.shape, pd_df.shape)
        
        # V√©rifier l'historique
        self.assertEqual(len(augmenter.augmentation_history), 2)
        
        print("‚úÖ Initialisation et utilisation avec PD.csv valid√©es")
    
    def test_initialization_with_s_csv_data(self):
        """Test de l'initialisation et utilisation avec les donn√©es S.csv"""
        # Charger les donn√©es S.csv
        s_df = pd.read_csv(self.s_file, sep=';')
        print(f"üìä Donn√©es S.csv charg√©es: {s_df.shape}")
        
        # Initialiser l'augmenteur
        augmenter = GeophysicalDataAugmenter(random_seed=123)
        
        # V√©rifier que l'augmenteur peut traiter ces donn√©es
        self.assertIsInstance(augmenter.augmentation_history, list)
        self.assertEqual(len(augmenter.augmentation_history), 0)
        
        # Tester l'augmentation avec les donn√©es S.csv
        augmentations = ["gaussian_noise", "value_variation", "coordinate_perturbation"]
        augmented_dfs = augmenter.augment_dataframe(
            s_df, 
            augmentations, 
            num_augmentations=2
        )
        
        # V√©rifier les r√©sultats
        self.assertEqual(len(augmented_dfs), 2)
        for augmented_df in augmented_dfs:
            self.assertEqual(augmented_df.shape, s_df.shape)
        
        # V√©rifier l'historique
        self.assertEqual(len(augmenter.augmentation_history), 2)
        
        print("‚úÖ Initialisation et utilisation avec S.csv valid√©es")
    
    def test_initialization_with_cleaned_data(self):
        """Test de l'initialisation avec des donn√©es nettoy√©es"""
        # Nettoyer les donn√©es PD.csv
        cleaning_results = self.cleaner.clean_all_devices()
        
        if 'pole_dipole' in cleaning_results:
            clean_path, report = cleaning_results['pole_dipole']
            if clean_path and Path(clean_path).exists():
                # Charger les donn√©es nettoy√©es
                cleaned_df = pd.read_csv(clean_path)
                print(f"üìä Donn√©es PD nettoy√©es charg√©es: {cleaned_df.shape}")
                
                # Initialiser l'augmenteur
                augmenter = GeophysicalDataAugmenter(random_seed=42)
                
                # Tester l'augmentation avec les donn√©es nettoy√©es
                augmentations = ["gaussian_noise", "value_variation"]
                augmented_dfs = augmenter.augment_dataframe(
                    cleaned_df, 
                    augmentations, 
                    num_augmentations=1
                )
                
                # V√©rifier les r√©sultats
                self.assertEqual(len(augmented_dfs), 1)
                self.assertEqual(augmented_dfs[0].shape, cleaned_df.shape)
                
                print("‚úÖ Initialisation avec donn√©es nettoy√©es valid√©e")
            else:
                print("‚ö†Ô∏è Donn√©es PD nettoy√©es non disponibles")
        else:
            print("‚ö†Ô∏è Nettoyage des donn√©es PD non effectu√©")
    
    def test_initialization_with_grid_data(self):
        """Test de l'initialisation avec des donn√©es de grille"""
        # Cr√©er des donn√©es de grille bas√©es sur PD.csv
        pd_df = pd.read_csv(self.pd_file, sep=';')
        
        # Extraire les coordonn√©es et valeurs
        x_coords = pd_df['x'].values
        y_coords = pd_df['y'].values
        resistivity = pd_df['Rho(ohm.m)'].values
        chargeability = pd_df['M (mV/V)'].values
        
        # Cr√©er une grille 2D simple (8x8x4)
        grid_size = 8
        grid_2d = np.zeros((grid_size, grid_size, 4))
        
        # Remplir la grille avec les donn√©es
        for i in range(min(len(x_coords), grid_size * grid_size)):
            row = i // grid_size
            col = i % grid_size
            if row < grid_size and col < grid_size:
                grid_2d[row, col, 0] = resistivity[i] if i < len(resistivity) else 0
                grid_2d[row, col, 1] = chargeability[i] if i < len(chargeability) else 0
                grid_2d[row, col, 2] = x_coords[i] if i < len(x_coords) else 0
                grid_2d[row, col, 3] = y_coords[i] if i < len(y_coords) else 0
        
        print(f"üìä Grille 2D cr√©√©e: {grid_2d.shape}")
        
        # Initialiser l'augmenteur
        augmenter = GeophysicalDataAugmenter(random_seed=42)
        
        # Tester l'augmentation avec la grille
        augmentations = ["rotation", "flip_horizontal", "gaussian_noise"]
        augmented_grids = augmenter.augment_2d_grid(
            grid_2d, 
            augmentations, 
            num_augmentations=2
        )
        
        # V√©rifier les r√©sultats
        self.assertEqual(len(augmented_grids), 2)
        for augmented_grid in augmented_grids:
            self.assertEqual(augmented_grid.shape, grid_2d.shape)
        
        print("‚úÖ Initialisation avec donn√©es de grille valid√©e")
    
    def test_initialization_with_volume_data(self):
        """Test de l'initialisation avec des donn√©es de volume 3D"""
        # Cr√©er un volume 3D bas√© sur S.csv
        s_df = pd.read_csv(self.s_file, sep=';')
        
        # Extraire les valeurs de r√©sistivit√©
        resistivity = s_df['Rho (Ohm.m)'].values
        
        # Cr√©er un volume 3D simple (8x8x8x4)
        volume_size = 8
        volume_3d = np.zeros((volume_size, volume_size, volume_size, 4))
        
        # Remplir le volume avec les donn√©es
        for i in range(min(len(resistivity), volume_size * volume_size * volume_size)):
            d = i // (volume_size * volume_size)
            h = (i % (volume_size * volume_size)) // volume_size
            w = i % volume_size
            if d < volume_size and h < volume_size and w < volume_size:
                volume_3d[d, h, w, 0] = resistivity[i] if i < len(resistivity) else 0
                volume_3d[d, h, w, 1] = resistivity[i] * 0.1 if i < len(resistivity) else 0  # Chargeabilit√© simul√©e
                volume_3d[d, h, w, 2] = i  # Coordonn√©e X simul√©e
                volume_3d[d, h, w, 3] = i * 2  # Coordonn√©e Y simul√©e
        
        print(f"üìä Volume 3D cr√©√©: {volume_3d.shape}")
        
        # Initialiser l'augmenteur
        augmenter = GeophysicalDataAugmenter(random_seed=123)
        
        # Tester l'augmentation avec le volume
        augmentations = ["rotation", "flip_horizontal", "gaussian_noise"]
        augmented_volumes = augmenter.augment_3d_volume(
            volume_3d, 
            augmentations, 
            num_augmentations=2
        )
        
        # V√©rifier les r√©sultats
        self.assertEqual(len(augmented_volumes), 2)
        for augmented_volume in augmented_volumes:
            self.assertEqual(augmented_volume.shape, volume_3d.shape)
        
        print("‚úÖ Initialisation avec donn√©es de volume 3D valid√©e")
    
    def test_initialization_performance(self):
        """Test de performance de l'initialisation"""
        start_time = time.time()
        
        # Initialiser plusieurs augmenteurs
        augmenters = []
        for i in range(10):
            augmenter = GeophysicalDataAugmenter(random_seed=i)
            augmenters.append(augmenter)
        
        initialization_time = time.time() - start_time
        
        # V√©rifier que l'initialisation est rapide
        self.assertLess(initialization_time, 1.0, "L'initialisation devrait √™tre rapide (< 1 seconde)")
        
        # V√©rifier que tous les augmenteurs sont correctement initialis√©s
        for i, augmenter in enumerate(augmenters):
            self.assertEqual(augmenter._random_seed, i)
            self.assertEqual(len(augmenter.augmentation_history), 0)
        
        print(f"‚úÖ Performance d'initialisation valid√©e: {initialization_time:.3f} secondes pour 10 augmenteurs")
    
    def test_initialization_error_handling(self):
        """Test de gestion des erreurs lors de l'initialisation"""
        # Test avec des types de graine invalides
        invalid_seeds = ["invalid", 3.14, [], {}, None, -1]
        
        for invalid_seed in invalid_seeds:
            try:
                # Ces initialisations ne devraient pas lever d'erreur
                augmenter = GeophysicalDataAugmenter(random_seed=invalid_seed)
                
                # V√©rifier que l'augmenteur est quand m√™me utilisable
                self.assertIsInstance(augmenter.augmentation_history, list)
                
                # Tester une augmentation simple
                test_data = np.random.rand(4, 4, 4)
                augmented_data = augmenter.augment_2d_grid(test_data, ["flip_horizontal"], 1)
                self.assertEqual(len(augmented_data), 1)
                
            except Exception as e:
                # Si une erreur est lev√©e, elle devrait √™tre g√©r√©e gracieusement
                print(f"‚ö†Ô∏è Gestion d'erreur pour graine invalide '{invalid_seed}': {e}")
        
        print("‚úÖ Gestion des erreurs d'initialisation valid√©e")
    
    def test_initialization_integration(self):
        """Test d'int√©gration de l'initialisation avec le pipeline complet"""
        # Charger les donn√©es
        pd_df = pd.read_csv(self.pd_file, sep=';')
        s_df = pd.read_csv(self.s_file, sep=';')
        
        # Initialiser l'augmenteur
        augmenter = GeophysicalDataAugmenter(random_seed=42)
        
        # Tester l'augmentation sur diff√©rents types de donn√©es
        test_results = {}
        
        # Test DataFrame PD.csv
        try:
            augmented_pd = augmenter.augment_dataframe(pd_df, ["gaussian_noise"], 1)
            test_results['PD_DataFrame'] = len(augmented_pd) > 0
        except Exception as e:
            test_results['PD_DataFrame'] = False
            print(f"‚ùå Erreur avec PD DataFrame: {e}")
        
        # Test DataFrame S.csv
        try:
            augmented_s = augmenter.augment_dataframe(s_df, ["value_variation"], 1)
            test_results['S_DataFrame'] = len(augmented_s) > 0
        except Exception as e:
            test_results['S_DataFrame'] = False
            print(f"‚ùå Erreur avec S DataFrame: {e}")
        
        # Test grille 2D
        try:
            grid_2d = np.random.rand(8, 8, 4)
            augmented_grid = augmenter.augment_2d_grid(grid_2d, ["rotation"], 1)
            test_results['Grid_2D'] = len(augmented_grid) > 0
        except Exception as e:
            test_results['Grid_2D'] = False
            print(f"‚ùå Erreur avec grille 2D: {e}")
        
        # Test volume 3D
        try:
            volume_3d = np.random.rand(8, 8, 8, 4)
            augmented_volume = augmenter.augment_3d_volume(volume_3d, ["flip_horizontal"], 1)
            test_results['Volume_3D'] = len(augmented_volume) > 0
        except Exception as e:
            test_results['Volume_3D'] = False
            print(f"‚ùå Erreur avec volume 3D: {e}")
        
        # V√©rifier les r√©sultats
        success_count = sum(test_results.values())
        total_tests = len(test_results)
        
        print(f"üìä R√©sultats d'int√©gration: {success_count}/{total_tests} tests r√©ussis")
        for test_name, result in test_results.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"   {status} {test_name}")
        
        # Au moins 3 tests sur 4 devraient r√©ussir
        self.assertGreaterEqual(success_count, 3, "La plupart des tests d'int√©gration devraient r√©ussir")
        
        print("‚úÖ Tests d'int√©gration de l'initialisation valid√©s")
    
    def test_initialization_summary(self):
        """Test du r√©sum√© apr√®s initialisation et utilisation"""
        # Initialiser l'augmenteur
        augmenter = GeophysicalDataAugmenter(random_seed=42)
        
        # V√©rifier le r√©sum√© initial
        initial_summary = augmenter.get_augmentation_summary()
        self.assertIn("message", initial_summary)
        self.assertEqual(initial_summary["message"], "Aucune augmentation effectu√©e")
        
        # Effectuer quelques augmentations
        pd_df = pd.read_csv(self.pd_file, sep=';')
        augmenter.augment_dataframe(pd_df, ["gaussian_noise"], 2)
        
        # V√©rifier le r√©sum√© apr√®s utilisation
        final_summary = augmenter.get_augmentation_summary()
        self.assertIn("total_augmentations", final_summary)
        self.assertEqual(final_summary["total_augmentations"], 2)
        
        print("‚úÖ R√©sum√© apr√®s initialisation et utilisation valid√©")
    
    def test_initialization_reproducibility(self):
        """Test de reproductibilit√© avec la m√™me graine"""
        # Cr√©er des donn√©es de test
        test_data = np.random.rand(8, 8, 4)
        
        # Initialiser deux augmenteurs avec la m√™me graine
        augmenter1 = GeophysicalDataAugmenter(random_seed=42)
        augmenter2 = GeophysicalDataAugmenter(random_seed=42)
        
        # Effectuer les m√™mes augmentations
        result1 = augmenter1.augment_2d_grid(test_data, ["flip_horizontal"], 1)
        result2 = augmenter2.augment_2d_grid(test_data, ["flip_horizontal"], 1)
        
        # Les r√©sultats devraient √™tre identiques avec la m√™me graine
        np.testing.assert_array_equal(result1[0], result2[0])
        
        print("‚úÖ Reproductibilit√© avec la m√™me graine valid√©e")


if __name__ == "__main__":
    unittest.main(verbosity=2)
