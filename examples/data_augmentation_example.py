#!/usr/bin/env python3
"""
Exemple d'utilisation du module GeophysicalDataAugmenter.
Ce script d√©montre comment utiliser les diff√©rentes techniques d'augmentation
pour am√©liorer l'entra√Ænement des mod√®les CNN.
"""

import sys
import numpy as np
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt

# Ajouter le r√©pertoire parent au path Python
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.preprocessor.data_augmenter import GeophysicalDataAugmenter
from src.data.data_processor import GeophysicalDataProcessor
from config import CONFIG


def create_sample_data():
    """Cr√©er des donn√©es d'exemple pour la d√©monstration."""
    print("üîß Cr√©ation des donn√©es d'exemple...")
    
    # Cr√©er une grille 2D d'exemple (64x64x4)
    height, width = CONFIG.processing.grid_2d
    channels = 4
    
    # Simuler des donn√©es g√©ophysiques r√©alistes
    grid_2d = np.zeros((height, width, channels))
    
    # Canal 0: R√©sistivit√© (simuler un corps conducteur)
    x, y = np.meshgrid(np.linspace(0, 1, width), np.linspace(0, 1, height))
    center_x, center_y = 0.5, 0.5
    radius = 0.2
    
    # Cr√©er un corps conducteur circulaire
    distance = np.sqrt((x - center_x)**2 + (y - center_y)**2)
    conductivity = np.exp(-distance / radius)
    grid_2d[:, :, 0] = conductivity * 1000  # R√©sistivit√© en Ohm.m
    
    # Canal 1: Chargeabilit√© (simuler un corps polarisable)
    chargeability = np.exp(-distance / (radius * 0.8)) * 150
    grid_2d[:, :, 1] = chargeability  # Chargeabilit√© en mV/V
    
    # Canaux 2-3: Coordonn√©es spatiales
    grid_2d[:, :, 2] = x * 1000  # Coordonn√©e X en m√®tres
    grid_2d[:, :, 3] = y * 1000  # Coordonn√©e Y en m√®tres
    
    # Cr√©er un volume 3D d'exemple (32x32x32x4)
    depth, height, width = CONFIG.processing.grid_3d
    volume_3d = np.zeros((depth, height, width, channels))
    
    # √âtendre la grille 2D en 3D
    for d in range(depth):
        volume_3d[d] = grid_2d
    
    # Cr√©er un DataFrame d'exemple
    n_points = 200
    df = pd.DataFrame({
        'x': np.random.uniform(0, 1000, n_points),
        'y': np.random.uniform(0, 1000, n_points),
        'resistivity': np.random.lognormal(6, 1, n_points),  # R√©sistivit√© log-normale
        'chargeability': np.random.uniform(0, 200, n_points)
    })
    
    print(f"‚úÖ Donn√©es d'exemple cr√©√©es:")
    print(f"   - Grille 2D: {grid_2d.shape}")
    print(f"   - Volume 3D: {volume_3d.shape}")
    print(f"   - DataFrame: {df.shape}")
    
    return grid_2d, volume_3d, df


def demonstrate_2d_augmentation(augmenter, grid_2d):
    """D√©montrer l'augmentation 2D."""
    print("\nüîÑ D√©monstration de l'augmentation 2D...")
    
    # Techniques d'augmentation recommand√©es pour les grilles 2D
    augmentations_2d = augmenter.get_recommended_augmentations("2d_grid")
    print(f"   Techniques recommand√©es: {augmentations_2d}")
    
    # Effectuer plusieurs augmentations
    augmented_grids = augmenter.augment_2d_grid(
        grid_2d, 
        augmentations_2d[:4],  # Utiliser les 4 premi√®res techniques
        num_augmentations=3
    )
    
    print(f"   ‚úÖ {len(augmented_grids)} grilles augment√©es g√©n√©r√©es")
    
    # Afficher un r√©sum√©
    summary = augmenter.get_augmentation_summary()
    print(f"   R√©sum√©: {summary['total_augmentations']} augmentations effectu√©es")
    
    return augmented_grids


def demonstrate_3d_augmentation(augmenter, volume_3d):
    """D√©montrer l'augmentation 3D."""
    print("\nüîÑ D√©monstration de l'augmentation 3D...")
    
    # Techniques d'augmentation recommand√©es pour les volumes 3D
    augmentations_3d = augmenter.get_recommended_augmentations("3d_volume")
    print(f"   Techniques recommand√©es: {augmentations_3d}")
    
    # Effectuer plusieurs augmentations
    augmented_volumes = augmenter.augment_3d_volume(
        volume_3d, 
        augmentations_3d,
        num_augmentations=2
    )
    
    print(f"   ‚úÖ {len(augmented_volumes)} volumes augment√©s g√©n√©r√©s")
    
    return augmented_volumes


def demonstrate_dataframe_augmentation(augmenter, df):
    """D√©montrer l'augmentation de DataFrame."""
    print("\nüîÑ D√©monstration de l'augmentation de DataFrame...")
    
    # Techniques d'augmentation recommand√©es pour les DataFrames
    augmentations_df = augmenter.get_recommended_augmentations("dataframe")
    print(f"   Techniques recommand√©es: {augmentations_df}")
    
    # Effectuer plusieurs augmentations
    augmented_dfs = augmenter.augment_dataframe(
        df, 
        augmentations_df,
        num_augmentations=2
    )
    
    print(f"   ‚úÖ {len(augmented_dfs)} DataFrames augment√©s g√©n√©r√©s")
    
    return augmented_dfs


def visualize_augmentations(original_grid, augmented_grids):
    """Visualiser les augmentations 2D."""
    print("\nüìä Visualisation des augmentations...")
    
    # Cr√©er une figure avec les grilles originales et augment√©es
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    fig.suptitle('Comparaison des donn√©es originales et augment√©es', fontsize=16)
    
    # Afficher la grille originale (canal de r√©sistivit√©)
    im0 = axes[0, 0].imshow(original_grid[:, :, 0], cmap='viridis')
    axes[0, 0].set_title('Original - R√©sistivit√©')
    axes[0, 0].set_xlabel('X')
    axes[0, 0].set_ylabel('Y')
    plt.colorbar(im0, ax=axes[0, 0])
    
    # Afficher la premi√®re augmentation
    im1 = axes[0, 1].imshow(augmented_grids[0][:, :, 0], cmap='viridis')
    axes[0, 1].set_title('Augmentation 1 - R√©sistivit√©')
    axes[0, 1].set_xlabel('X')
    axes[0, 1].set_ylabel('Y')
    plt.colorbar(im1, ax=axes[0, 1])
    
    # Afficher la deuxi√®me augmentation
    im2 = axes[1, 0].imshow(augmented_grids[1][:, :, 0], cmap='viridis')
    axes[1, 0].set_title('Augmentation 2 - R√©sistivit√©')
    axes[1, 0].set_xlabel('X')
    axes[1, 0].set_ylabel('Y')
    plt.colorbar(im2, ax=axes[1, 0])
    
    # Afficher la troisi√®me augmentation
    im3 = axes[1, 1].imshow(augmented_grids[2][:, :, 0], cmap='viridis')
    axes[1, 1].set_title('Augmentation 3 - R√©sistivit√©')
    axes[1, 1].set_xlabel('X')
    axes[1, 1].set_ylabel('Y')
    plt.colorbar(im3, ax=axes[1, 1])
    
    plt.tight_layout()
    
    # Sauvegarder la figure
    output_dir = Path("artifacts")
    output_dir.mkdir(exist_ok=True)
    plt.savefig(output_dir / "data_augmentation_comparison.png", dpi=300, bbox_inches='tight')
    print(f"   üìÅ Figure sauvegard√©e: {output_dir / 'data_augmentation_comparison.png'}")
    
    plt.show()


def demonstrate_advanced_features(augmenter):
    """D√©montrer les fonctionnalit√©s avanc√©es."""
    print("\nüöÄ D√©monstration des fonctionnalit√©s avanc√©es...")
    
    # Validation des param√®tres
    print("   üîç Validation des param√®tres d'augmentation:")
    
    valid_augmentations = ["rotation", "flip_horizontal"]
    is_valid = augmenter.validate_augmentation_parameters(valid_augmentations, "2d_grid")
    print(f"     - Augmentations valides: {is_valid}")
    
    invalid_augmentations = ["invalid_technique"]
    is_valid = augmenter.validate_augmentation_parameters(invalid_augmentations, "2d_grid")
    print(f"     - Augmentations invalides: {is_valid}")
    
    # Recommandations
    print("   üí° Recommandations d'augmentation:")
    for data_type in ["2d_grid", "3d_volume", "dataframe"]:
        recommendations = augmenter.get_recommended_augmentations(data_type)
        print(f"     - {data_type}: {recommendations}")
    
    # Historique et r√©sum√©
    print("   üìã R√©sum√© des augmentations:")
    summary = augmenter.get_augmentation_summary()
    if "message" not in summary:
        print(f"     - Total: {summary['total_augmentations']}")
        print(f"     - Types: {summary['augmentation_types']}")
    else:
        print(f"     - {summary['message']}")


def main():
    """Fonction principale."""
    print("üöÄ D√©monstration du module GeophysicalDataAugmenter")
    print("=" * 60)
    
    try:
        # Cr√©er l'augmenteur
        print("\nüîß Initialisation de l'augmenteur...")
        augmenter = GeophysicalDataAugmenter(random_seed=42)
        print("   ‚úÖ Augmenteur initialis√© avec succ√®s")
        
        # Cr√©er des donn√©es d'exemple
        grid_2d, volume_3d, df = create_sample_data()
        
        # D√©monstrations
        augmented_grids = demonstrate_2d_augmentation(augmenter, grid_2d)
        augmented_volumes = demonstrate_3d_augmentation(augmenter, volume_3d)
        augmented_dfs = demonstrate_dataframe_augmentation(augmenter, df)
        
        # Fonctionnalit√©s avanc√©es
        demonstrate_advanced_features(augmenter)
        
        # Visualisation
        visualize_augmentations(grid_2d, augmented_grids)
        
        # R√©sum√© final
        print("\nüéâ D√©monstration termin√©e avec succ√®s!")
        print("\nüìä Statistiques finales:")
        final_summary = augmenter.get_augmentation_summary()
        if "message" not in final_summary:
            print(f"   - Total des augmentations: {final_summary['total_augmentations']}")
            print(f"   - Types d'augmentation utilis√©s: {list(final_summary['augmentation_types'].keys())}")
        
        print("\nüí° Utilisation dans votre pipeline:")
        print("   1. Int√©grez l'augmenteur dans votre DataProcessor")
        print("   2. Appliquez l'augmentation avant l'entra√Ænement")
        print("   3. Utilisez les techniques recommand√©es selon vos donn√©es")
        print("   4. Surveillez l'historique des augmentations")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
