#!/usr/bin/env python3
"""
Script pour charger et utiliser le mod√®le hybride sauvegard√© (hybrid_model.pth).
Ce script montre comment charger le mod√®le et faire des pr√©dictions.
"""

import sys
import torch
import numpy as np
from pathlib import Path
import argparse
import cv2
from PIL import Image

# Ajouter le r√©pertoire courant au path Python
sys.path.insert(0, str(Path(__file__).parent))

def load_hybrid_model(model_path: str = "artifacts/models/hybrid_model.pth"):
    """
    Charger le mod√®le hybride sauvegard√©.
    
    Args:
        model_path: Chemin vers le fichier .pth
        
    Returns:
        Mod√®le charg√© et pr√™t √† l'utilisation
    """
    print(f"üîÑ Chargement du mod√®le hybride depuis: {model_path}")
    
    # V√©rifier que le fichier existe
    if not Path(model_path).exists():
        raise FileNotFoundError(f"Le fichier mod√®le n'existe pas: {model_path}")
    
    # Importer les classes n√©cessaires
    from src.model.geophysical_hybrid_net import GeophysicalHybridNet
    
    # Charger le checkpoint
    checkpoint = torch.load(model_path, map_location='cpu')
    
    # Afficher les informations du checkpoint
    print(f"üìä Informations du mod√®le:")
    print(f"   - Architecture: Mod√®le Hybride (Images + Donn√©es G√©ophysiques)")
    print(f"   - Classes: 2")
    print(f"   - Mod√®le d'images: ResNet18")
    print(f"   - M√©thode de fusion: Concatenation")
    
    # Cr√©er le mod√®le hybride
    model = GeophysicalHybridNet(
        num_classes=2,
        image_model="resnet18",
        pretrained=False,  # Utiliser les poids sauvegard√©s
        geo_input_dim=4,
        image_feature_dim=512,
        geo_feature_dim=256,
        fusion_hidden_dims=(512, 256),
        dropout=0.5,
        fusion_method="concatenation",
        freeze_backbone=False
    )
    
    # Charger les poids
    model.load_state_dict(checkpoint)
    model.eval()
    
    print("‚úÖ Mod√®le hybride charg√© avec succ√®s!")
    return model

def create_sample_data():
    """
    Cr√©er des donn√©es d'exemple pour tester le mod√®le hybride.
    
    Returns:
        Tuple (image, geo_data) pour le mod√®le hybride
    """
    print("üîß Cr√©ation de donn√©es d'exemple...")
    
    # Cr√©er une image factice (3 canaux, 64x64)
    image = np.random.randint(0, 255, (64, 64, 3), dtype=np.uint8)
    
    # Cr√©er des donn√©es g√©ophysiques factices (4 dimensions)
    geo_data = np.random.rand(4).astype(np.float32)
    
    print(f"üìä Donn√©es d'exemple cr√©√©es:")
    print(f"   - Image: {image.shape}, type: {image.dtype}")
    print(f"   - Donn√©es g√©ophysiques: {geo_data.shape}, type: {geo_data.dtype}")
    
    return image, geo_data

def load_real_data():
    """
    Charger les donn√©es r√©elles pour le mod√®le hybride.
    
    Returns:
        Tuple (image, geo_data) pour le mod√®le hybride
    """
    print("üåç Chargement des donn√©es r√©elles...")
    
    try:
        # Charger une image r√©elle
        image_paths = [
            "data/raw/images/resistivity/resis1.JPG",
            "data/raw/images/chargeability/char_1.PNG"
        ]
        
        # Trouver une image existante
        image_path = None
        for path in image_paths:
            if Path(path).exists():
                image_path = path
                break
        
        if image_path is None:
            print("‚ùå Aucune image r√©elle trouv√©e, utilisation des donn√©es d'exemple")
            return create_sample_data()
        
        # Charger l'image
        image = cv2.imread(image_path)
        if image is None:
            # Essayer avec PIL
            image = np.array(Image.open(image_path))
        
        # Redimensionner √† 64x64
        image = cv2.resize(image, (64, 64))
        
        # Convertir BGR vers RGB si n√©cessaire
        if len(image.shape) == 3 and image.shape[2] == 3:
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        
        # Cr√©er des donn√©es g√©ophysiques factices
        geo_data = np.random.rand(4).astype(np.float32)
        
        print(f"‚úÖ Donn√©es r√©elles charg√©es:")
        print(f"   - Image: {image_path} -> {image.shape}")
        print(f"   - Donn√©es g√©ophysiques: {geo_data.shape}")
        
        return image, geo_data
        
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement des donn√©es r√©elles: {e}")
        print("üîÑ Utilisation des donn√©es d'exemple...")
        return create_sample_data()

def preprocess_data(image, geo_data):
    """
    Pr√©processer les donn√©es pour le mod√®le hybride.
    
    Args:
        image: Image (numpy array)
        geo_data: Donn√©es g√©ophysiques (numpy array)
        
    Returns:
        Tuple (image_tensor, geo_tensor) pr√™ts pour le mod√®le
    """
    # Pr√©processer l'image
    # Normaliser les pixels [0, 255] -> [0, 1]
    image_normalized = image.astype(np.float32) / 255.0
    
    # Convertir en tenseur PyTorch et r√©organiser (H, W, C) -> (C, H, W)
    image_tensor = torch.FloatTensor(image_normalized).permute(2, 0, 1)
    
    # Ajouter une dimension batch
    image_tensor = image_tensor.unsqueeze(0)  # (1, 3, 64, 64)
    
    # Pr√©processer les donn√©es g√©ophysiques
    geo_tensor = torch.FloatTensor(geo_data).unsqueeze(0)  # (1, 4)
    
    return image_tensor, geo_tensor

def predict_with_model(model, image, geo_data):
    """
    Faire des pr√©dictions avec le mod√®le hybride charg√©.
    
    Args:
        model: Mod√®le hybride charg√©
        image: Image (numpy array)
        geo_data: Donn√©es g√©ophysiques (numpy array)
        
    Returns:
        Pr√©dictions du mod√®le
    """
    print(f"üîÆ Pr√©diction sur des donn√©es hybrides...")
    
    # Pr√©processer les donn√©es
    image_tensor, geo_tensor = preprocess_data(image, geo_data)
    
    print(f"üìä Donn√©es pr√©process√©es:")
    print(f"   - Image: {image_tensor.shape}")
    print(f"   - Donn√©es g√©ophysiques: {geo_tensor.shape}")
    
    # Faire la pr√©diction
    with torch.no_grad():
        predictions = model(image_tensor, geo_tensor)
        probabilities = torch.softmax(predictions, dim=1)
        predicted_classes = torch.argmax(predictions, dim=1)
    
    print(f"üéØ Pr√©dictions:")
    print(f"   - Classes pr√©dites: {predicted_classes.numpy()}")
    print(f"   - Probabilit√©s: {probabilities.numpy()}")
    
    return {
        'predictions': predictions.numpy(),
        'probabilities': probabilities.numpy(),
        'predicted_classes': predicted_classes.numpy()
    }

def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(description='Ex√©cuter le mod√®le hybride sauvegard√©')
    parser.add_argument('--model-path', default='artifacts/models/hybrid_model.pth',
                       help='Chemin vers le fichier mod√®le')
    parser.add_argument('--real-data', action='store_true',
                       help='Utiliser les donn√©es r√©elles au lieu des donn√©es d\'exemple')
    parser.add_argument('--verbose', action='store_true',
                       help='Mode verbeux')
    
    args = parser.parse_args()
    
    try:
        # Charger le mod√®le
        model = load_hybrid_model(args.model_path)
        
        # Charger les donn√©es
        if args.real_data:
            image, geo_data = load_real_data()
        else:
            image, geo_data = create_sample_data()
        
        # Faire des pr√©dictions
        results = predict_with_model(model, image, geo_data)
        
        print("\nüéâ Ex√©cution du mod√®le hybride termin√©e avec succ√®s!")
        
        if args.verbose:
            print(f"\nüìã R√©sum√© d√©taill√©:")
            print(f"   - Mod√®le: Hybride (Images + Donn√©es G√©ophysiques)")
            print(f"   - Donn√©es: {'R√©elles' if args.real_data else 'Exemple'}")
            print(f"   - Image: {image.shape}")
            print(f"   - Donn√©es g√©ophysiques: {geo_data.shape}")
            print(f"   - Pr√©dictions: {results['predicted_classes']}")
            print(f"   - Probabilit√©s: {results['probabilities']}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
