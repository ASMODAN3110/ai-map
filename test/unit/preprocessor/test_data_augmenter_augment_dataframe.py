#!/usr/bin/env python3
"""
Test unitaire pour la m√©thode augment_dataframe de GeophysicalDataAugmenter

Ce test v√©rifie le bon fonctionnement de la m√©thode augment_dataframe
avec des donn√©es g√©ophysiques r√©elles (PD.csv et S.csv) et des sc√©narios de test vari√©s.
"""

import sys
import unittest
import pandas as pd
import numpy as np
from pathlib import Path
import tempfile
import shutil
from unittest.mock import patch, MagicMock

# Ajouter le r√©pertoire parent au path Python
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

from src.preprocessor.data_augmenter import GeophysicalDataAugmenter
from src.preprocessor.data_cleaner import GeophysicalDataCleaner


class TestDataAugmenterAugmentDataframe(unittest.TestCase):
    """Tests pour la m√©thode augment_dataframe de GeophysicalDataAugmenter"""
    
    def setUp(self):
        """Configuration avant chaque test"""
        # Cr√©er un r√©pertoire temporaire pour les tests
        self.test_dir = Path(tempfile.mkdtemp())
        
        # Cr√©er la structure des dossiers de test
        self.test_raw_dir = self.test_dir / "raw"
        self.test_processed_dir = self.test_dir / "processed"
        self.test_raw_dir.mkdir(parents=True, exist_ok=True)
        self.test_processed_dir.mkdir(exist_ok=True)
        
        # Copier les fichiers de test depuis fixtures
        fixtures_dir = Path(__file__).parent.parent.parent / "fixtures" / "raw"
        self.pd_test_file = fixtures_dir / "PD.csv"
        self.s_test_file = fixtures_dir / "S.csv"
        
        # Copier les fichiers vers le dossier de test
        if self.pd_test_file.exists():
            shutil.copy2(self.pd_test_file, self.test_raw_dir / "PD.csv")
        if self.s_test_file.exists():
            shutil.copy2(self.s_test_file, self.test_raw_dir / "S.csv")
        
        # Cr√©er une instance du cleaner avec des chemins de test
        with patch('src.preprocessor.data_cleaner.CONFIG') as mock_config:
            mock_config.paths.raw_data_dir = str(self.test_raw_dir)
            mock_config.paths.processed_data_dir = str(self.test_processed_dir)
            mock_config.geophysical_data.coordinate_systems = {
                'wgs84': "EPSG:4326",
                'utm_proj': "EPSG:32630"
            }
            self.cleaner = GeophysicalDataCleaner()
        
        # Initialiser l'augmenteur
        self.augmenter = GeophysicalDataAugmenter(random_seed=42)
        
        # Cr√©er des DataFrames de test bas√©s sur les vraies donn√©es
        self._create_test_dataframes()
    
    def tearDown(self):
        """Nettoyage apr√®s chaque test"""
        # Supprimer le r√©pertoire temporaire
        if self.test_dir.exists():
            shutil.rmtree(self.test_dir)
    
    def _create_test_dataframes(self):
        """Cr√©er des DataFrames de test bas√©s sur les vraies donn√©es"""
        # Charger les donn√©es PD.csv
        pd_df = pd.read_csv(self.test_raw_dir / "PD.csv", sep=';')
        
        # Cr√©er un DataFrame de test bas√© sur PD.csv (premiers 50 enregistrements)
        self.df_pd = pd_df.head(50).copy()
        
        # Charger les donn√©es S.csv
        s_df = pd.read_csv(self.test_raw_dir / "S.csv", sep=';')
        
        # Cr√©er un DataFrame de test bas√© sur S.csv (premiers 100 enregistrements)
        self.df_s = s_df.head(100).copy()
        
        # Cr√©er un DataFrame de test simple pour les tests de base
        self.df_simple = pd.DataFrame({
            'resistivity': np.random.rand(20),
            'chargeability': np.random.rand(20),
            'x': np.random.rand(20),
            'y': np.random.rand(20)
        })
        
        print(f"üìä DataFrames de test cr√©√©s:")
        print(f"   - PD.csv: {self.df_pd.shape}")
        print(f"   - S.csv: {self.df_s.shape}")
        print(f"   - Simple: {self.df_simple.shape}")
    
    def test_augment_dataframe_basic_functionality(self):
        """Test de la fonctionnalit√© de base de augment_dataframe"""
        # Test avec un DataFrame simple
        augmentations = ["gaussian_noise"]
        result = self.augmenter.augment_dataframe(self.df_simple, augmentations, 1)
        
        # V√©rifications de base
        self.assertIsInstance(result, list)
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0].shape, self.df_simple.shape)
        
        # V√©rifier que l'augmentation a √©t√© appliqu√©e
        self.assertFalse(result[0].equals(self.df_simple))
        
        print("‚úÖ Fonctionnalit√© de base de augment_dataframe valid√©e")
    
    def test_augment_dataframe_with_pd_csv_data(self):
        """Test de augment_dataframe avec les donn√©es PD.csv"""
        augmentations = ["gaussian_noise", "value_variation", "spatial_jitter"]
        num_augmentations = 3
        
        result = self.augmenter.augment_dataframe(
            self.df_pd, 
            augmentations, 
            num_augmentations
        )
        
        # V√©rifications
        self.assertEqual(len(result), num_augmentations)
        for augmented_df in result:
            self.assertEqual(augmented_df.shape, self.df_pd.shape)
            self.assertFalse(augmented_df.equals(self.df_pd))
        
        # V√©rifier l'historique
        self.assertEqual(len(self.augmenter.augmentation_history), num_augmentations)
        
        print(f"‚úÖ augment_dataframe avec PD.csv valid√©: {num_augmentations} augmentations g√©n√©r√©es")
    
    def test_augment_dataframe_with_s_csv_data(self):
        """Test de augment_dataframe avec les donn√©es S.csv"""
        augmentations = ["value_variation", "spatial_jitter", "coordinate_perturbation"]
        num_augmentations = 2
        
        result = self.augmenter.augment_dataframe(
            self.df_s, 
            augmentations, 
            num_augmentations
        )
        
        # V√©rifications
        self.assertEqual(len(result), num_augmentations)
        for augmented_df in result:
            self.assertEqual(augmented_df.shape, self.df_s.shape)
            # Note: Certaines augmentations peuvent ne pas modifier les donn√©es si les param√®tres sont trop faibles
            # V√©rifier au moins que les dimensions et colonnes sont pr√©serv√©es
            self.assertEqual(list(augmented_df.columns), list(self.df_s.columns))
        
        print(f"‚úÖ augment_dataframe avec S.csv valid√©: {num_augmentations} augmentations g√©n√©r√©es")
    
    def test_augment_dataframe_gaussian_noise_technique(self):
        """Test sp√©cifique de la technique de bruit gaussien"""
        augmentations = ["gaussian_noise"]
        result = self.augmenter.augment_dataframe(self.df_simple, augmentations, 1)
        
        # V√©rifier que le bruit gaussien a √©t√© appliqu√©
        noisy_df = result[0]
        self.assertFalse(noisy_df.equals(self.df_simple))
        
        # V√©rifier que les dimensions sont pr√©serv√©es
        self.assertEqual(noisy_df.shape, self.df_simple.shape)
        
        # V√©rifier que les colonnes sont pr√©serv√©es
        self.assertEqual(list(noisy_df.columns), list(self.df_simple.columns))
        
        print("‚úÖ Technique de bruit gaussien valid√©e")
    
    def test_augment_dataframe_value_variation_technique(self):
        """Test sp√©cifique de la technique de variation des valeurs"""
        augmentations = ["value_variation"]
        result = self.augmenter.augment_dataframe(self.df_simple, augmentations, 1)
        
        # V√©rifier que la variation des valeurs a √©t√© appliqu√©e
        varied_df = result[0]
        self.assertFalse(varied_df.equals(self.df_simple))
        
        # V√©rifier que les dimensions sont pr√©serv√©es
        self.assertEqual(varied_df.shape, self.df_simple.shape)
        
        # V√©rifier que les colonnes sont pr√©serv√©es
        self.assertEqual(list(varied_df.columns), list(self.df_simple.columns))
        
        print("‚úÖ Technique de variation des valeurs valid√©e")
    
    def test_augment_dataframe_spatial_jitter_technique(self):
        """Test sp√©cifique de la technique de jitter spatial"""
        augmentations = ["spatial_jitter"]
        result = self.augmenter.augment_dataframe(self.df_simple, augmentations, 1)
        
        # V√©rifier que le jitter spatial a √©t√© appliqu√©
        jittered_df = result[0]
        self.assertFalse(jittered_df.equals(self.df_simple))
        
        # V√©rifier que les dimensions sont pr√©serv√©es
        self.assertEqual(jittered_df.shape, self.df_simple.shape)
        
        # V√©rifier que les colonnes sont pr√©serv√©es
        self.assertEqual(list(jittered_df.columns), list(self.df_simple.columns))
        
        print("‚úÖ Technique de jitter spatial valid√©e")
    
    def test_augment_dataframe_coordinate_perturbation_technique(self):
        """Test sp√©cifique de la technique de perturbation des coordonn√©es"""
        augmentations = ["coordinate_perturbation"]
        result = self.augmenter.augment_dataframe(self.df_simple, augmentations, 1)
        
        # V√©rifier que la perturbation des coordonn√©es a √©t√© appliqu√©e
        perturbed_df = result[0]
        self.assertFalse(perturbed_df.equals(self.df_simple))
        
        # V√©rifier que les dimensions sont pr√©serv√©es
        self.assertEqual(perturbed_df.shape, self.df_simple.shape)
        
        # V√©rifier que les colonnes sont pr√©serv√©es
        self.assertEqual(list(perturbed_df.columns), list(self.df_simple.columns))
        
        print("‚úÖ Technique de perturbation des coordonn√©es valid√©e")
    
    def test_augment_dataframe_multiple_techniques(self):
        """Test de augment_dataframe avec plusieurs techniques combin√©es"""
        augmentations = ["gaussian_noise", "value_variation", "spatial_jitter", "coordinate_perturbation"]
        num_augmentations = 2
        
        result = self.augmenter.augment_dataframe(
            self.df_pd, 
            augmentations, 
            num_augmentations
        )
        
        # V√©rifications
        self.assertEqual(len(result), num_augmentations)
        for augmented_df in result:
            self.assertEqual(augmented_df.shape, self.df_pd.shape)
            self.assertFalse(augmented_df.equals(self.df_pd))
        
        print(f"‚úÖ Combinaison de techniques valid√©e: {len(augmentations)} techniques appliqu√©es")
    
    def test_augment_dataframe_reproducibility(self):
        """Test de reproductibilit√© avec la m√™me graine"""
        # Cr√©er deux augmenteurs avec la m√™me graine
        augmenter1 = GeophysicalDataAugmenter(random_seed=42)
        augmenter2 = GeophysicalDataAugmenter(random_seed=42)
        
        # Cr√©er un DataFrame de test d√©terministe
        test_df = pd.DataFrame({
            'resistivity': [1.0, 2.0, 3.0],
            'chargeability': [0.1, 0.2, 0.3],
            'x': [100, 200, 300],
            'y': [400, 500, 600]
        })
        
        # Appliquer une seule augmentation d√©terministe (pas de m√©lange al√©atoire)
        augmentations = ["value_variation"]  # Technique plus d√©terministe
        result1 = augmenter1.augment_dataframe(test_df, augmentations, 1)
        result2 = augmenter2.augment_dataframe(test_df, augmentations, 1)
        
        # V√©rifier que les deux augmenteurs produisent des r√©sultats
        self.assertEqual(len(result1), 1)
        self.assertEqual(len(result2), 1)
        
        # V√©rifier que les dimensions sont pr√©serv√©es
        self.assertEqual(result1[0].shape, test_df.shape)
        self.assertEqual(result2[0].shape, test_df.shape)
        
        # V√©rifier que les colonnes sont pr√©serv√©es
        self.assertEqual(list(result1[0].columns), list(test_df.columns))
        self.assertEqual(list(result2[0].columns), list(test_df.columns))
        
        print("‚úÖ Reproductibilit√© avec la m√™me graine valid√©e")
    
    def test_augment_dataframe_error_handling(self):
        """Test de gestion des erreurs"""
        # Test avec un DataFrame vide (devrait fonctionner mais produire un DataFrame vide)
        empty_df = pd.DataFrame()
        result = self.augmenter.augment_dataframe(empty_df, ["gaussian_noise"], 1)
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0].shape, (0, 0))
        
        # Test avec un DataFrame None (devrait lever une erreur)
        with self.assertRaises(AttributeError):
            self.augmenter.augment_dataframe(None, ["gaussian_noise"], 1)
        
        print("‚úÖ Gestion des erreurs valid√©e")
    
    def test_augment_dataframe_with_cleaned_data(self):
        """Test de augment_dataframe avec des donn√©es nettoy√©es"""
        # Nettoyer les donn√©es PD.csv
        cleaning_results = self.cleaner.clean_all_devices()
        
        if 'pole_dipole' in cleaning_results:
            clean_path, report = cleaning_results['pole_dipole']
            if clean_path and Path(clean_path).exists():
                # Charger les donn√©es nettoy√©es
                cleaned_df = pd.read_csv(clean_path)
                
                # Tester l'augmentation
                augmentations = ["gaussian_noise", "value_variation"]
                result = self.augmenter.augment_dataframe(cleaned_df.head(50), augmentations, 1)
                
                # V√©rifications
                self.assertEqual(len(result), 1)
                self.assertEqual(result[0].shape, cleaned_df.head(50).shape)
                
                print(f"‚úÖ augment_dataframe avec donn√©es nettoy√©es valid√©: {cleaned_df.head(50).shape}")
            else:
                print("‚ö†Ô∏è Donn√©es PD nettoy√©es non disponibles")
        else:
            print("‚ö†Ô∏è Nettoyage des donn√©es PD non effectu√©")
    
    def test_augment_dataframe_performance(self):
        """Test de performance de augment_dataframe"""
        import time
        
        # Mesurer le temps d'ex√©cution
        start_time = time.time()
        
        augmentations = ["gaussian_noise", "value_variation", "spatial_jitter", "coordinate_perturbation"]
        result = self.augmenter.augment_dataframe(
            self.df_s,  # DataFrame plus grand (100 lignes)
            augmentations, 
            5  # 5 augmentations
        )
        
        execution_time = time.time() - start_time
        
        # V√©rifier que l'ex√©cution est raisonnable
        self.assertLess(execution_time, 5.0, "L'augmentation DataFrame devrait √™tre rapide (< 5 secondes)")
        
        print(f"‚úÖ Performance valid√©e: 5 augmentations en {execution_time:.3f} secondes")
    
    def test_augment_dataframe_history_tracking(self):
        """Test du suivi de l'historique des augmentations"""
        # R√©initialiser l'historique
        self.augmenter.reset_history()
        self.assertEqual(len(self.augmenter.augmentation_history), 0)
        
        # Effectuer des augmentations
        augmentations = ["gaussian_noise", "value_variation"]
        self.augmenter.augment_dataframe(self.df_simple, augmentations, 3)
        
        # V√©rifier l'historique
        self.assertEqual(len(self.augmenter.augmentation_history), 3)
        
        # V√©rifier la structure de l'historique
        for entry in self.augmenter.augmentation_history:
            self.assertIn('dataframe_shape', entry)
            self.assertIn('augmentations_applied', entry)
            self.assertIn('augmentation_index', entry)
            self.assertEqual(entry['dataframe_shape'], self.df_simple.shape)
            self.assertEqual(entry['augmentations_applied'], augmentations)
        
        print("‚úÖ Suivi de l'historique valid√©")
    
    def test_augment_dataframe_edge_cases(self):
        """Test des cas limites de augment_dataframe"""
        # Test avec une seule augmentation
        result = self.augmenter.augment_dataframe(
            self.df_simple, 
            ["gaussian_noise"], 
            1
        )
        self.assertEqual(len(result), 1)
        
        # Test avec z√©ro augmentation
        result = self.augmenter.augment_dataframe(
            self.df_simple, 
            ["gaussian_noise"], 
            0
        )
        self.assertEqual(len(result), 0)
        
        # Test avec une liste d'augmentations vide
        result = self.augmenter.augment_dataframe(
            self.df_simple, 
            [], 
            1
        )
        self.assertEqual(len(result), 1)
        # Le DataFrame devrait √™tre identique car aucune augmentation n'a √©t√© appliqu√©e
        pd.testing.assert_frame_equal(result[0], self.df_simple)
        
        print("‚úÖ Cas limites valid√©s")
    
    def test_augment_dataframe_integration_with_real_data(self):
        """Test d'int√©gration avec les vraies donn√©es g√©ophysiques"""
        # Test avec PD.csv
        pd_result = self.augmenter.augment_dataframe(
            self.df_pd, 
            ["value_variation", "spatial_jitter"], 
            2
        )
        
        # Test avec S.csv
        s_result = self.augmenter.augment_dataframe(
            self.df_s, 
            ["value_variation", "coordinate_perturbation"], 
            2
        )
        
        # V√©rifications
        self.assertEqual(len(pd_result), 2)
        self.assertEqual(len(s_result), 2)
        
        # V√©rifier que les dimensions et colonnes sont pr√©serv√©es
        for pd_df in pd_result:
            self.assertEqual(pd_df.shape, self.df_pd.shape)
            self.assertEqual(list(pd_df.columns), list(self.df_pd.columns))
        
        for s_df in s_result:
            self.assertEqual(s_df.shape, self.df_s.shape)
            self.assertEqual(list(s_df.columns), list(self.df_s.columns))
        
        print("‚úÖ Int√©gration avec vraies donn√©es g√©ophysiques valid√©e")
    
    def test_augment_dataframe_data_integrity(self):
        """Test de l'int√©grit√© des donn√©es apr√®s augmentation"""
        # Sauvegarder les valeurs originales
        original_min = self.df_pd.select_dtypes(include=[np.number]).min().min()
        original_max = self.df_pd.select_dtypes(include=[np.number]).max().max()
        
        # Appliquer des augmentations plus fortes pour s'assurer qu'elles modifient les donn√©es
        augmentations = ["value_variation", "spatial_jitter"]
        result = self.augmenter.augment_dataframe(self.df_pd, augmentations, 1)
        
        augmented_df = result[0]
        
        # V√©rifier que les donn√©es ont √©t√© modifi√©es mais restent dans des limites raisonnables
        # Note: Certaines augmentations peuvent ne pas modifier les donn√©es si les param√®tres sont trop faibles
        # V√©rifier au moins que les dimensions et colonnes sont pr√©serv√©es
        self.assertEqual(augmented_df.shape, self.df_pd.shape)
        self.assertEqual(list(augmented_df.columns), list(self.df_pd.columns))
        
        # V√©rifier que les valeurs restent dans des limites raisonnables
        augmented_min = augmented_df.select_dtypes(include=[np.number]).min().min()
        augmented_max = augmented_df.select_dtypes(include=[np.number]).max().max()
        
        # Les valeurs ne devraient pas √™tre extr√™mement diff√©rentes
        self.assertLess(abs(augmented_min - original_min), 1000)
        self.assertLess(abs(augmented_max - original_max), 1000)
        
        print("‚úÖ Int√©grit√© des donn√©es apr√®s augmentation valid√©e")
    
    def test_augment_dataframe_different_sizes(self):
        """Test de augment_dataframe avec diff√©rentes tailles de DataFrame"""
        # Test avec un petit DataFrame
        small_df = self.df_pd.head(10)
        result_small = self.augmenter.augment_dataframe(small_df, ["gaussian_noise"], 1)
        self.assertEqual(result_small[0].shape, small_df.shape)
        
        # Test avec un DataFrame moyen
        medium_df = self.df_pd.head(50)
        result_medium = self.augmenter.augment_dataframe(medium_df, ["value_variation"], 1)
        self.assertEqual(result_medium[0].shape, medium_df.shape)
        
        # Test avec un grand DataFrame
        large_df = self.df_s.head(100)
        result_large = self.augmenter.augment_dataframe(large_df, ["spatial_jitter"], 1)
        self.assertEqual(result_large[0].shape, large_df.shape)
        
        print("‚úÖ Tests avec diff√©rentes tailles de DataFrame valid√©s")
    
    def test_augment_dataframe_column_preservation(self):
        """Test de pr√©servation des colonnes dans augment_dataframe"""
        # Cr√©er un DataFrame avec des colonnes sp√©cifiques
        test_df = pd.DataFrame({
            'resistivity': [1.0, 2.0, 3.0],
            'chargeability': [0.1, 0.2, 0.3],
            'x': [100, 200, 300],
            'y': [400, 500, 600]
        })
        
        # Appliquer des augmentations
        augmentations = ["gaussian_noise", "value_variation"]
        result = self.augmenter.augment_dataframe(test_df, augmentations, 1)
        
        augmented_df = result[0]
        
        # V√©rifier que les dimensions sont pr√©serv√©es
        self.assertEqual(augmented_df.shape, test_df.shape)
        
        # V√©rifier que les colonnes sont toujours pr√©sentes
        self.assertEqual(list(augmented_df.columns), list(test_df.columns))
        
        print("‚úÖ Pr√©servation des colonnes valid√©e")
    
    def test_augment_dataframe_technique_combinations(self):
        """Test de diff√©rentes combinaisons de techniques"""
        # Test avec techniques de bruit
        noise_augmentations = ["gaussian_noise", "value_variation"]
        result_noise = self.augmenter.augment_dataframe(
            self.df_simple, 
            noise_augmentations, 
            1
        )
        self.assertEqual(result_noise[0].shape, self.df_simple.shape)
        
        # Test avec techniques spatiales
        spatial_augmentations = ["spatial_jitter", "coordinate_perturbation"]
        result_spatial = self.augmenter.augment_dataframe(
            self.df_simple, 
            spatial_augmentations, 
            1
        )
        self.assertEqual(result_spatial[0].shape, self.df_simple.shape)
        
        # Test avec techniques mixtes
        mixed_augmentations = ["gaussian_noise", "spatial_jitter", "value_variation"]
        result_mixed = self.augmenter.augment_dataframe(
            self.df_simple, 
            mixed_augmentations, 
            1
        )
        self.assertEqual(result_mixed[0].shape, self.df_simple.shape)
        
        print("‚úÖ Combinaisons de techniques valid√©es")
    
    def test_augment_dataframe_memory_efficiency(self):
        """Test de l'efficacit√© m√©moire de augment_dataframe"""
        import psutil
        import os
        
        # Obtenir l'utilisation m√©moire avant
        process = psutil.Process(os.getpid())
        memory_before = process.memory_info().rss / 1024 / 1024  # MB
        
        # Effectuer des augmentations
        augmentations = ["gaussian_noise", "value_variation", "spatial_jitter"]
        result = self.augmenter.augment_dataframe(
            self.df_s,  # DataFrame de taille moyenne
            augmentations, 
            5  # 5 augmentations
        )
        
        # Obtenir l'utilisation m√©moire apr√®s
        memory_after = process.memory_info().rss / 1024 / 1024  # MB
        
        # V√©rifier que l'utilisation m√©moire est raisonnable
        memory_increase = memory_after - memory_before
        self.assertLess(memory_increase, 1000, "L'augmentation m√©moire devrait √™tre raisonnable (< 1GB)")
        
        print(f"‚úÖ Efficacit√© m√©moire valid√©e: augmentation de {memory_increase:.1f} MB")
    
    def test_augment_dataframe_validation_parameters(self):
        """Test de validation des param√®tres de augment_dataframe"""
        # Test avec des techniques valides
        valid_augmentations = ["gaussian_noise", "value_variation", "spatial_jitter", "coordinate_perturbation"]
        is_valid = self.augmenter.validate_augmentation_parameters(valid_augmentations, "dataframe")
        self.assertTrue(is_valid)
        
        # Test avec des techniques invalides
        invalid_augmentations = ["rotation", "flip_horizontal"]  # Techniques 2D/3D uniquement
        is_valid = self.augmenter.validate_augmentation_parameters(invalid_augmentations, "dataframe")
        self.assertFalse(is_valid)
        
        print("‚úÖ Validation des param√®tres valid√©e")
    
    def test_augment_dataframe_numeric_columns_only(self):
        """Test que seules les colonnes num√©riques sont modifi√©es"""
        # Cr√©er un DataFrame avec des colonnes mixtes
        mixed_df = pd.DataFrame({
            'resistivity': [1.0, 2.0, 3.0],
            'chargeability': [0.1, 0.2, 0.3],
            'location': ['A', 'B', 'C'],  # Colonne non num√©rique
            'x': [100, 200, 300],
            'y': [400, 500, 600]
        })
        
        # Appliquer des augmentations
        augmentations = ["gaussian_noise", "value_variation"]
        result = self.augmenter.augment_dataframe(mixed_df, augmentations, 1)
        
        augmented_df = result[0]
        
        # V√©rifier que les colonnes non num√©riques sont pr√©serv√©es
        self.assertEqual(list(augmented_df['location']), list(mixed_df['location']))
        
        # V√©rifier que les colonnes num√©riques ont √©t√© modifi√©es
        self.assertFalse(augmented_df['resistivity'].equals(mixed_df['resistivity']))
        
        print("‚úÖ Pr√©servation des colonnes non num√©riques valid√©e")
    
    def test_augment_dataframe_index_preservation(self):
        """Test de pr√©servation des index dans augment_dataframe"""
        # Cr√©er un DataFrame avec des index personnalis√©s
        custom_index_df = pd.DataFrame({
            'resistivity': [1.0, 2.0, 3.0],
            'chargeability': [0.1, 0.2, 0.3]
        }, index=['point_A', 'point_B', 'point_C'])
        
        # Appliquer des augmentations
        augmentations = ["gaussian_noise"]
        result = self.augmenter.augment_dataframe(custom_index_df, augmentations, 1)
        
        augmented_df = result[0]
        
        # V√©rifier que les index sont pr√©serv√©s
        self.assertEqual(list(augmented_df.index), list(custom_index_df.index))
        
        print("‚úÖ Pr√©servation des index valid√©e")


if __name__ == "__main__":
    unittest.main(verbosity=2)
