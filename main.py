#!/usr/bin/env python3
"""
Pipeline principal pour le projet AI-MAP, inspir√© d'EMUT.
Orchestre l'ensemble du traitement des donn√©es g√©ophysiques et du pipeline d'entra√Ænement CNN.
"""

import json
import sys
from pathlib import Path

# Ajouter le r√©pertoire courant au path Python
sys.path.insert(0, str(Path(__file__).parent))

try:
    from config import CONFIG
    from src.utils.logger import logger
    
    def main():
        """
        Pipeline principal pour le projet AI-MAP.
        """
        try:
            logger.info("üöÄ Starting AI-MAP Pipeline")
            logger.info("=" * 60)
            
            # Phase 1: Nettoyage et pr√©traitement des donn√©es
            logger.info("üìã Phase 1: Nettoyage et pr√©traitement des donn√©es")
            logger.info("-" * 40)
            
            # Initialiser le nettoyeur de donn√©es
            from src.preprocessor.data_cleaner import GeophysicalDataCleaner
            cleaner = GeophysicalDataCleaner()
            
            # Nettoyer les donn√©es de tous les dispositifs
            cleaning_results = cleaner.clean_all_devices()
            
            logger.info("‚úÖ Nettoyage des donn√©es termin√© avec succ√®s")
            logger.info("Rapport de nettoyage:")
            for device_name, (clean_path, report) in cleaning_results.items():
                logger.info(f"  {device_name}: {report.get('cleaned_count', 0)}/{report.get('original_count', 0)} enregistrements conserv√©s")
            
            # Phase 2: Traitement des donn√©es et cr√©ation des grilles
            logger.info("\nüìä Phase 2: Traitement des donn√©es et cr√©ation des grilles")
            logger.info("-" * 40)
            
            # Initialiser le processeur de donn√©es
            from src.data.data_processor import GeophysicalDataProcessor
            processor = GeophysicalDataProcessor()
            
            # Charger et valider les donn√©es nettoy√©es
            device_data = processor.load_and_validate()
            
            if not device_data:
                logger.warning("Aucune donn√©e de dispositif valide trouv√©e apr√®s le nettoyage")
                logger.info("Le pipeline continuera avec des donn√©es vides pour la d√©monstration")
            else:
                # Cr√©er les grilles spatiales
                spatial_grids = processor.create_spatial_grids()
                
                # Cr√©er le tenseur multi-dispositifs pour l'entr√©e CNN
                multi_device_tensor = processor.create_multi_device_tensor()
                
                # Cr√©er le volume 3D pour VoxNet
                volume_3d = processor.create_3d_volume()
                
                logger.info("‚úÖ Traitement des donn√©es termin√© avec succ√®s")
                logger.info(f"Forme du tenseur multi-dispositifs: {multi_device_tensor.shape}")
                logger.info(f"Forme du volume 3D: {volume_3d.shape}")
                
                # Phase 3: Division et pr√©paration des donn√©es
                logger.info("\nüîÄ Phase 3: Division et pr√©paration des donn√©es")
                logger.info("-" * 40)
                
                # Diviser les donn√©es pour l'entra√Ænement
                x_train, x_test = processor.split_data(multi_device_tensor)
                
                logger.info(f"Taille de l'ensemble d'entra√Ænement: {len(x_train)}")
                logger.info(f"Taille de l'ensemble de test: {len(x_test)}")
            
            # Phase 4: Entra√Ænement du mod√®le (Placeholder pour l'instant)
            logger.info("\nü§ñ Phase 4: Entra√Ænement du mod√®le (Placeholder)")
            logger.info("-" * 40)
            
            logger.info("L'entra√Ænement du mod√®le sera impl√©ment√© dans la prochaine phase")
            logger.info("Configuration pr√™te pour:")
            logger.info(f"  - U-Net 2D: {CONFIG.cnn.unet_2d['input_shape']}")
            logger.info(f"  - VoxNet 3D: {CONFIG.cnn.voxnet_3d['input_shape']}")
            
            # Phase 5: R√©sultats et r√©sum√©
            logger.info("\nüìà Phase 5: R√©sultats et r√©sum√©")
            logger.info("-" * 40)
            
            # Obtenir le r√©sum√© des donn√©es si le processeur a des donn√©es
            if 'processor' in locals() and hasattr(processor, 'get_data_summary'):
                try:
                    data_summary = processor.get_data_summary()
                    
                    # Sauvegarder le r√©sum√© dans les artefacts
                    artifacts_dir = Path(CONFIG.paths.artifacts_dir)
                    artifacts_dir.mkdir(parents=True, exist_ok=True)
                    
                    summary_file = artifacts_dir / "phase1_summary.json"
                    with open(summary_file, 'w') as f:
                        json.dump(data_summary, f, indent=2, default=str)
                    
                    logger.info(f"R√©sum√© des donn√©es sauvegard√© dans: {summary_file}")
                except Exception as e:
                    logger.warning(f"Impossible de g√©n√©rer le r√©sum√© des donn√©es: {e}")
            
            # Statut final
            logger.info("\n" + "=" * 60)
            logger.info("üéâ PIPELINE AI-MAP PHASE 1 TERMIN√â AVEC SUCC√àS!")
            logger.info("=" * 60)
            
            logger.info("üìã Ce qui a √©t√© accompli:")
            logger.info("  ‚úÖ Nettoyage et validation des donn√©es")
            logger.info("  ‚úÖ Transformation et alignement des coordonn√©es")
            logger.info("  ‚úÖ Cr√©ation des grilles spatiales")
            logger.info("  ‚úÖ Normalisation des donn√©es")
            logger.info("  ‚úÖ Pr√©paration du tenseur multi-dispositifs")
            logger.info("  ‚úÖ Cr√©ation du volume 3D")
            logger.info("  ‚úÖ Division des donn√©es d'entra√Ænement/test")
            
            logger.info("\nüöÄ Prochaines √©tapes:")
            logger.info("  üìä Phase 2: Impl√©mentation des mod√®les CNN")
            logger.info("  üß† Phase 3: Entra√Ænement et validation des mod√®les")
            logger.info("  üåê Phase 4: D√©veloppement de l'application web")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Le pipeline a √©chou√©: {str(e)}")
            logger.error("Trace de la pile:", exc_info=True)
            raise
    
    if __name__ == "__main__":
        success = main()
        if success:
            logger.info("üéØ Pipeline termin√© avec succ√®s!")
        else:
            logger.error("üí• Le pipeline a √©chou√©!")
            sys.exit(1)
            
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("Veuillez v√©rifier que tous les packages requis sont install√©s:")
    print("pip install -r requirements/requirements_phase1.txt")
    sys.exit(1)
    
except Exception as e:
    print(f"‚ùå Erreur inattendue: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
