#!/usr/bin/env python3
"""
Exemple d'utilisation des donn√©es organis√©es
==========================================

Ce script montre comment charger et utiliser les donn√©es
organis√©es pour l'entra√Ænement et les tests.
"""

import os
from pathlib import Path
from src.data.image_processor import ImageAugmenter, GeophysicalImageProcessor

def load_training_data():
    """Charger les donn√©es d'entra√Ænement."""
    train_path = Path("data/training/images")
    
    # Images de r√©sistivit√©
    resistivity_files = list(train_path.glob("resistivity/*.JPG"))
    print(f"Images de r√©sistivit√© d'entra√Ænement: {len(resistivity_files)}")
    
    # Images de chargeabilit√©
    chargeability_files = list(train_path.glob("chargeability/*.JPG")) + \
                         list(train_path.glob("chargeability/*.PNG"))
    print(f"Images de chargeabilit√© d'entra√Ænement: {len(chargeability_files)}")
    
    # Images de profils
    profile_files = list(train_path.glob("profiles/*.JPG"))
    print(f"Images de profils d'entra√Ænement: {len(profile_files)}")
    
    return resistivity_files, chargeability_files, profile_files

def load_test_data():
    """Charger les donn√©es de test."""
    test_path = Path("data/test/images")
    
    # Images de r√©sistivit√©
    resistivity_files = list(test_path.glob("resistivity/*.JPG"))
    print(f"Images de r√©sistivit√© de test: {len(resistivity_files)}")
    
    # Images de chargeabilit√©
    chargeability_files = list(test_path.glob("chargeability/*.JPG")) + \
                         list(test_path.glob("chargeability/*.PNG"))
    print(f"Images de chargeabilit√© de test: {len(chargeability_files)}")
    
    # Images de profils
    profile_files = list(test_path.glob("profiles/*.JPG"))
    print(f"Images de profils de test: {len(profile_files)}")
    
    return resistivity_files, chargeability_files, profile_files

def demonstrate_augmentation():
    """D√©montrer l'augmentation des donn√©es d'entra√Ænement."""
    print("\nüöÄ D√©monstration de l'augmentation des donn√©es...")
    
    # Initialiser l'augmenteur
    augmenter = ImageAugmenter(random_seed=42)
    
    # Charger une image d'exemple
    train_path = Path("data/training/images/resistivity")
    example_image = next(train_path.glob("*.JPG"))
    
    print(f"Image d'exemple: {example_image.name}")
    
    # Augmenter l'image
    from PIL import Image
    image = Image.open(example_image)
    
    augmented_images = augmenter.augment_image(
        image,
        ["rotation", "flip_horizontal", "gaussian_noise", "elastic_deformation"],
        num_augmentations=3
    )
    
    print(f"Images augment√©es cr√©√©es: {len(augmented_images)}")
    
    return augmented_images

def demonstrate_image_processing():
    """D√©montrer le traitement d'images g√©ophysiques."""
    print("\nüîß D√©monstration du traitement d'images...")
    
    # Initialiser le processeur
    processor = GeophysicalImageProcessor(target_size=(64, 64), channels=3)
    
    # Charger une image d'exemple
    train_path = Path("data/training/images/resistivity")
    example_image = next(train_path.glob("*.JPG"))
    
    print(f"Traitement de l'image: {example_image.name}")
    
    try:
        # Traiter l'image
        tensor = processor.process_image(str(example_image))
        print(f"Image trait√©e avec succ√®s: {tensor.shape}")
        
        # Sauvegarder l'image trait√©e
        output_path = Path("data/processed") / "example_processed.png"
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Convertir le tenseur en image
        import torchvision.utils as vutils
        vutils.save_image(tensor, str(output_path))
        print(f"Image trait√©e sauvegard√©e: {output_path}")
        
    except Exception as e:
        print(f"Erreur lors du traitement: {e}")
    
    return processor

def create_training_dataset():
    """Cr√©er un dataset d'entra√Ænement avec augmentation."""
    print("\nüìä Cr√©ation du dataset d'entra√Ænement...")
    
    # Charger les donn√©es d'entra√Ænement
    train_res, train_char, train_prof = load_training_data()
    
    # Initialiser l'augmenteur
    augmenter = ImageAugmenter(random_seed=42)
    
    # Techniques d'augmentation pour images g√©ophysiques
    geophysical_augmentations = [
        "rotation", "flip_horizontal", "gaussian_noise",
        "elastic_deformation", "geological_stratification"
    ]
    
    print(f"Dataset d'entra√Ænement cr√©√©:")
    print(f"  - Images de r√©sistivit√©: {len(train_res)}")
    print(f"  - Images de chargeabilit√©: {len(train_char)}")
    print(f"  - Images de profils: {len(train_prof)}")
    print(f"  - Techniques d'augmentation: {len(geophysical_augmentations)}")
    
    return {
        'resistivity': train_res,
        'chargeability': train_char,
        'profiles': train_prof,
        'augmentations': geophysical_augmentations,
        'augmenter': augmenter
    }

def main():
    """Fonction principale de d√©monstration."""
    print("üìä Chargement des donn√©es organis√©es...")
    print("=" * 50)
    
    # Charger les donn√©es d'entra√Ænement
    train_res, train_char, train_prof = load_training_data()
    
    # Charger les donn√©es de test
    test_res, test_char, test_prof = load_test_data()
    
    print("\nüìà R√©sum√© des donn√©es:")
    print(f"  Entra√Ænement: {len(train_res) + len(train_char) + len(train_prof)} images")
    print(f"  Test: {len(test_res) + len(test_char) + len(test_prof)} images")
    
    # D√©montrer l'augmentation
    augmented = demonstrate_augmentation()
    
    # D√©montrer le traitement
    processor = demonstrate_image_processing()
    
    # Cr√©er le dataset d'entra√Ænement
    dataset = create_training_dataset()
    
    print("\n‚úÖ Exemple d'utilisation termin√©!")
    print("\nüí° Prochaines √©tapes:")
    print("  1. Utiliser ces donn√©es pour entra√Æner votre mod√®le CNN")
    print("  2. Appliquer l'augmentation pour enrichir le dataset")
    print("  3. Utiliser les donn√©es de test pour √©valuer les performances")
    print("  4. Int√©grer dans votre pipeline d'entra√Ænement")

if __name__ == "__main__":
    main()
